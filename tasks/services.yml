# Ensure systemd services and timers are configured

---

- name: Set sytemd path and scope if running as root
  ansible.builtin.set_fact:
    borgmatic_systemd_path: /etc/systemd/system
    borgmatic_systemd_scope: system
  when: user.name == 'root'

- name: Set sytemd path and scope if not running as root
  ansible.builtin.set_fact:
    borgmatic_systemd_path: '{{ user.home }}/.config/systemd/user'
    borgmatic_systemd_scope: user
  when: user.name != 'root'

# Backup services
- name: Ensure systemd service files are configured for backups
  ansible.builtin.template:
    src: borgmatic.service.j2
    dest: '{{ borgmatic_systemd_path }}/borgmatic-{{ item.name }}.service'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0644
  no_log: true
  when: item.schedule.backup.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

- name: Ensure systemd timer files are configured for backups
  ansible.builtin.template:
    src: borgmatic.timer.j2
    dest: '{{ borgmatic_systemd_path }}/borgmatic-{{ item.name }}.timer'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0644
  no_log: true
  when: item.schedule.backup.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

- name: Ensure systemd timers are enabled for backups
  ansible.builtin.systemd:
    name: 'borgmatic-{{ item.name }}.timer'
    scope: '{{ borgmatic_systemd_scope }}'
    daemon_reload: true
    state: started
    enabled: true
  no_log: true
  when: item.schedule.backup.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

# Check services
- name: Ensure systemd service files are configured for checks
  ansible.builtin.template:
    src: borgmatic-check.service.j2
    dest: '{{ borgmatic_systemd_path }}/borgmatic-check-{{ item.name }}.service'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0644
  no_log: true
  when: item.schedule.check.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

- name: Ensure systemd timer files are configured for checks
  ansible.builtin.template:
    src: borgmatic-check.timer.j2
    dest: '{{ borgmatic_systemd_path }}/borgmatic-check-{{ item.name }}.timer'
    owner: '{{ user.name }}'
    group: '{{ user.name }}'
    mode: 0644
  no_log: true
  when: item.schedule.check.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

- name: Ensure systemd timers are enabled for checks
  ansible.builtin.systemd:
    name: 'borgmatic-check-{{ item.name }}.timer'
    scope: '{{ borgmatic_systemd_scope }}'
    daemon_reload: true
    state: started
    enabled: true
  no_log: true
  when: item.schedule.check.oncalendar is defined
  loop: '{{ borgmatic_present_configs }}'

# Cleanup absent services
- name: Retrieve service facts
  ansible.builtin.service_facts:

- name: Ensure absent backup services are removed
  ansible.builtin.file:
    path: '{{ borgmatic_systemd_path }}/borgmatic-{{ item.name }}.service'
    state: absent
  no_log: true
  loop: '{{ borgmatic_absent_configs }}'

- name: Ensure absent backup timers are disabled
  ansible.builtin.systemd:
    name: '{{ service_name }}'
    scope: '{{ borgmatic_systemd_scope }}'
    state: stopped
    enabled: false
  vars:
    service_name: 'borgmatic-{{ item.name }}.timer'
  no_log: true
  when: service_name in ansible_facts.services
  loop: '{{ borgmatic_absent_configs }}'

- name: Ensure absent backup timers are removed
  ansible.builtin.file:
    path: '{{ borgmatic_systemd_path }}/borgmatic-{{ item.name }}.timer'
    state: absent
  no_log: true
  loop: '{{ borgmatic_absent_configs }}'

- name: Ensure absent check timers are disabled
  ansible.builtin.systemd:
    name: '{{ service_name }}'
    scope: '{{ borgmatic_systemd_scope }}'
    state: stopped
    enabled: false
  vars:
    service_name: 'borgmatic-check-{{ item.name }}.timer'
  no_log: true
  when: service_name in ansible_facts.services
  loop: '{{ borgmatic_absent_configs }}'

- name: Ensure absent check timers are removed
  ansible.builtin.file:
    path: '{{ borgmatic_systemd_path }}/borgmatic-check-{{ item.name }}.timer'
    state: absent
  no_log: true
  loop: '{{ borgmatic_absent_configs }}'
